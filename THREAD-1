#include <atomic>
#include <iostream>
#include <mutex>
#include <thread>
#include <vector>
#include <cstdlib>
#include <ctime>

static std::atomic_int atomic_counter(0);// определяем атомарное число

std::mutex io_mtx;

int n;

void thread_proc(int tnum) {
    for(;;) {
        {
            int ctr_val = ++atomic_counter;
            //Эта штука - атомарное число. Оно увеличивается каждым тредом последовательно. Каждый тред прибавляет к нему 1
            if(n < 0)
            //Проверяем, что n не отрицательно
                break;// Выходим из цикла, если n отрицательно

            {
                n -= ctr_val;//Вычитаем из n атомарное число
                std::lock_guard<std::mutex> lock(io_mtx);
                std::cout << "Thread " << tnum << ": counter = " <<
                             ctr_val << std::endl;
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

int main() {
    std::vector<std::thread> threads;
    std::srand(std::time(nullptr));
    int n = std::rand();

    int nthreads;
    cin << nthreads;
    if(nthreads == 0) nthreads = 2;

    for(int i = 0; i < nthreads; i++) {
        std::thread thr(thread_proc, i);// типа запускаем число потоков
        threads.emplace_back(std::move(thr));
    }

    for(auto& thr : threads) {
        thr.join();
    }

    std::cout << "Done!" << std::endl;
    return 0;
}
